{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///../node_modules/fast-xml-parser/src/fxp.js","webpack:///../node_modules/fast-xml-parser/src/ignoreAttributes.js","webpack:///../node_modules/fast-xml-parser/src/util.js","webpack:///../node_modules/fast-xml-parser/src/validator.js","webpack:///../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","webpack:///../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/node2json.js","webpack:///../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","webpack:///../node_modules/strnum/strnum.js","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./constants/datasource.ts","webpack:///./constants/items.ts","webpack:///./constants/query.ts","webpack:///./constants/tests.ts","webpack:///./components/ConfigEditor/ConfigEditor.tsx","webpack:///./components/ParametersEditor/ParametersEditor.tsx","webpack:///./components/QueryEditor/QueryEditor.tsx","webpack:///./utils.ts","webpack:///./api/api.ts","webpack:///./datasource/datasource.ts","webpack:///./module.ts"],"sourcesContent":["'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Datasource test status\n */\nexport enum DataSourceTestStatus {\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n","/**\n * Meta Properties\n */\nexport enum MetaProperties {\n  OG_IMAGE = 'og:image',\n}\n\n/**\n * Item Keys\n */\nexport enum ItemKey {\n  AUTHOR = 'author',\n  CONTENT = 'content',\n  CONTENT_ENCODED = 'content:encoded',\n  CONTENT_H4 = 'content:h4',\n  CONTENT_IMG = 'content:img',\n  CONTENT_IMG_SRC = 'content:img-src',\n  GUID = 'guid',\n  LINK = 'link',\n  META = 'meta',\n  PUB_DATE = 'pubDate',\n  SUMMARY = 'summary',\n  MEDIA_GROUP = 'media:group',\n  MEDIA_THUMBNAIL = 'media:thumbnail',\n  MEDIA_CONTENT = 'media:content',\n  MEDIA_DESCRIPTION = 'media:description',\n}\n\n/**\n * Parse as Array\n */\nexport const ALWAYS_ARRAY = ['feed.entry', 'rdf:RDF.item', 'rss.channel.item'];\n","import { SelectableValue } from '@grafana/data';\n\nimport { Query } from '../types';\n\n/**\n * Query Type Values\n */\nexport enum FeedTypeValue {\n  CHANNEL = 'channel',\n  ITEMS = 'items',\n  ALL = 'all',\n}\n\n/**\n * Defaults for Query\n */\nexport const DEFAULT_QUERY: Partial<Query> = {\n  feedType: FeedTypeValue.ALL,\n};\n\n/**\n * Query Type\n *\n * @type {SelectableValue[]}\n */\nexport const FEED_TYPE: SelectableValue[] = [\n  {\n    label: 'Channel & Items',\n    description: 'Returns channel data and items',\n    value: FeedTypeValue.ALL,\n  },\n  {\n    label: 'Channel',\n    description: 'Returns channel data only',\n    value: FeedTypeValue.CHANNEL,\n  },\n  {\n    label: 'Items',\n    description: 'Returns items only',\n    value: FeedTypeValue.ITEMS,\n  },\n];\n","/**\n * Tests Identifiers\n */\nexport const TEST_IDS = {\n  configEditor: {\n    fieldUrl: 'data-testid config-editor field-url',\n  },\n  parametersEditor: {\n    row: 'data-testid parameters-editor row',\n    buttonAdd: 'data-testid paremeters-editor button-add',\n    buttonRemove: 'data-testid paremeters-editor button-remove',\n  },\n  queryEditor: {\n    root: 'data-testid query-editor root',\n    fieldFeedType: 'query-editor field-feed-type',\n    fieldDate: 'data-testid query-editor field-date',\n  },\n};\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport React, { ChangeEvent, PureComponent } from 'react';\n\nimport { TEST_IDS } from '../../constants';\nimport { DataSourceOptions } from '../../types';\n\n/**\n * Editor Properties\n */\ntype Props = DataSourcePluginOptionsEditorProps<DataSourceOptions>;\n\n/**\n * Config Editor\n */\nexport class ConfigEditor extends PureComponent<Props, object> {\n  /**\n   * Feed URL Change\n   */\n  onFeedChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        feed: event.target.value,\n      },\n    });\n  };\n\n  /**\n   * Render\n   */\n  render() {\n    const { options } = this.props;\n    const { jsonData } = options;\n\n    return (\n      <InlineFieldRow>\n        <InlineField\n          label=\"Feed URL\"\n          labelWidth={14}\n          grow\n          invalid={jsonData.feed === ''}\n          tooltip={`The URL must be contain all necessary characters ('/' at the end, etc.) to avoid redirects and CORS issues.`}\n        >\n          <Input\n            type=\"text\"\n            value={jsonData.feed}\n            onChange={this.onFeedChange}\n            placeholder=\"https://feed\"\n            data-testid={TEST_IDS.configEditor.fieldUrl}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    );\n  }\n}\n","import { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport React from 'react';\n\nimport { TEST_IDS } from '../../constants';\nimport { Query } from '../../types';\n\n/**\n * Properties\n */\ninterface Props {\n  /**\n   * Query\n   *\n   * @type {Query}\n   */\n  query: Query;\n\n  /**\n   * On Change\n   */\n  onChange: (value: Query) => void;\n\n  /**\n   * On Run Query\n   */\n  onRunQuery: () => void;\n}\n\n/**\n * Parameters Editor\n */\nexport const ParametersEditor = ({ query, onChange, onRunQuery }: Props) => {\n  const params = query.params ? query.params : {};\n\n  /**\n   * Set Parameter\n   */\n  const setParameter = (key: string, value: string) => {\n    params[key] = value;\n\n    /**\n     * Change\n     */\n    onChange({ ...query, params });\n    onRunQuery();\n  };\n\n  /**\n   * Remove Parameter\n   */\n  const removeParameters = (key: string) => {\n    delete params[key];\n\n    /**\n     * Change\n     */\n    onChange({ ...query, params });\n    onRunQuery();\n  };\n\n  return (\n    <>\n      {Object.keys(params).map((param, i) => {\n        return (\n          <InlineFieldRow key={i} data-testid={TEST_IDS.parametersEditor.row}>\n            <InlineField label=\"Parameter\" grow>\n              <Input\n                value={param}\n                onChange={(e) => {\n                  setParameter(e.currentTarget.value, params[param]);\n                  removeParameters(param);\n                }}\n              />\n            </InlineField>\n\n            <InlineField label=\"Value\" tooltip=\"Supports dashboard variables.\" grow>\n              <Input\n                value={params[param]}\n                onChange={(e) => {\n                  setParameter(param, e.currentTarget.value);\n                }}\n              />\n            </InlineField>\n\n            <InlineField>\n              <Button\n                variant=\"destructive\"\n                title=\"Remove\"\n                onClick={() => removeParameters(param)}\n                icon=\"trash-alt\"\n                data-testid={TEST_IDS.parametersEditor.buttonRemove}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        );\n      })}\n\n      <InlineFieldRow>\n        <InlineField>\n          <Button\n            variant=\"primary\"\n            title=\"Add a Parameter\"\n            onClick={() => setParameter('', '')}\n            icon=\"plus\"\n            data-testid={TEST_IDS.parametersEditor.buttonAdd}\n          >\n            Add a Parameter\n          </Button>\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n};\n","import { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { CollapsableSection, InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { defaults } from 'lodash';\nimport React, { ChangeEvent, PureComponent } from 'react';\n\nimport { DEFAULT_QUERY, FEED_TYPE, FeedTypeValue, TEST_IDS } from '../../constants';\nimport { DataSource } from '../../datasource';\nimport { DataSourceOptions, Query } from '../../types';\nimport { ParametersEditor } from '../ParametersEditor';\n\n/**\n * Editor Properties\n */\ntype Props = QueryEditorProps<DataSource, Query, DataSourceOptions>;\n\n/**\n * Query Editor\n */\nexport class QueryEditor extends PureComponent<Props> {\n  /**\n   * Feed Type change\n   */\n  onFeedTypeChange = async (item: SelectableValue<FeedTypeValue>) => {\n    const { onChange, onRunQuery, query } = this.props;\n    onChange({ ...query, feedType: item.value });\n    onRunQuery();\n  };\n\n  /**\n   * Date Field change\n   */\n  onDateFieldChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, onRunQuery, query } = this.props;\n    onChange({ ...query, dateField: event.target.value });\n    onRunQuery();\n  };\n\n  /**\n   * Render\n   */\n  render() {\n    const query = defaults(this.props.query, DEFAULT_QUERY);\n    const { onChange, onRunQuery } = this.props;\n\n    return (\n      <div data-testid={TEST_IDS.queryEditor.root}>\n        <InlineFieldRow>\n          <InlineField label=\"Request\" labelWidth={8} grow={true}>\n            <Select\n              options={FEED_TYPE}\n              value={FEED_TYPE.find((type) => type.value === query.feedType)}\n              onChange={this.onFeedTypeChange}\n              aria-label={TEST_IDS.queryEditor.fieldFeedType}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label=\"Filter by Date field\"\n            labelWidth={20}\n            tooltip=\"Specify the date field's name to filter news in the time range.\"\n            grow\n          >\n            <Input\n              type=\"text\"\n              value={query.dateField}\n              onChange={this.onDateFieldChange}\n              placeholder=\"pubDate\"\n              data-testid={TEST_IDS.queryEditor.fieldDate}\n            />\n          </InlineField>\n        </InlineFieldRow>\n\n        <CollapsableSection label=\"URL Parameters\" isOpen={true}>\n          <ParametersEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n        </CollapsableSection>\n      </div>\n    );\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport { get } from 'lodash';\nimport { DataItem, FeedItems, KeyConfig } from 'types';\n\nimport { ItemKey } from './constants';\n/**\n * Set or added Item values\n */\nexport const setItem = (items: FeedItems, key: string, value: string | null) => {\n  items[key] ? items[key].push(value) : (items[key] = [value]);\n};\n\n/**\n * Check if date inside Time Range\n *\n * @returns {boolean}\n */\nexport const isDateBetweenRange = (value: string, range: TimeRange): boolean => {\n  const pubDate = Date.parse(value) / 1000;\n  if (!pubDate) {\n    return false;\n  }\n\n  /**\n   * Return false if out of range\n   */\n  if (range.from.unix() > pubDate || range.to.unix() < pubDate) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Create Unique Key Object\n * Linear pass of items and forming an object with unique keys based on an array of objects\n */\nexport const getUniqueAtomKeys = (items: DataItem[]) => {\n  return items.reduce((result: Record<string, string[]>, obj) => {\n    Object.keys(obj).forEach((key) => {\n      if (!result[key]) {\n        result[key] = [];\n      }\n    });\n    return result;\n  }, {});\n};\n\n/**\n * Get all item key configs\n * @param items\n */\nexport const getAllItemKeyConfigs = (items: DataItem[]): Record<string, KeyConfig> => {\n  const result: Record<string, KeyConfig> = {};\n\n  /**\n   * Go through all the objects in the array\n   */\n  for (const item of items) {\n    /**\n     * Handle other keys\n     */\n    for (const key in item) {\n      if (key !== ItemKey.META && key !== ItemKey.GUID && !result[key]) {\n        result[key] = {\n          valueAccessor: key,\n        };\n      }\n\n      /**\n       * If the object has a guid key\n       */\n      if (key === ItemKey.GUID) {\n        result[key] = {\n          valueAccessor: 'guid.#text',\n        };\n      }\n\n      /**\n       * If the object has a content:encoded key\n       */\n      if (key === ItemKey.CONTENT_ENCODED) {\n        const contentEncodedKeys = [ItemKey.CONTENT_H4, ItemKey.CONTENT_IMG, ItemKey.CONTENT_IMG_SRC];\n\n        contentEncodedKeys.forEach((contentKey) => {\n          if (!result[contentKey]) {\n            result[contentKey] = {\n              valueAccessor: key,\n            };\n          }\n        });\n      }\n\n      /**\n       * If the object has a “meta” key\n       */\n      if (key === ItemKey.META) {\n        const property = get(item.meta, '@_property');\n\n        /**\n         * If the “meta” key has not yet been added to the resulting object\n         */\n        if (property && !result[property as string]) {\n          result[property as string] = {\n            keyAccessor: 'meta.@_property',\n            valueAccessor: 'meta.@_content',\n          };\n        }\n      }\n    }\n  }\n\n  return result;\n};\n","import { createDataFrame, DataFrame, DataSourceInstanceSettings, FieldType, TimeRange } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { XMLParser } from 'fast-xml-parser';\nimport { get } from 'lodash';\nimport { lastValueFrom } from 'rxjs';\n\nimport { ALWAYS_ARRAY, FeedTypeValue, ItemKey } from '../constants';\nimport { DataItem, DataSourceOptions, FeedItems, Query } from '../types';\nimport { getAllItemKeyConfigs, getUniqueAtomKeys, isDateBetweenRange, setItem } from '../utils';\n\n/**\n * API\n */\nexport class Api {\n  /**\n   * Constructor\n   */\n  constructor(public instanceSettings: DataSourceInstanceSettings<DataSourceOptions>) {}\n\n  /**\n   * Get RSS feed\n   *\n   * @async\n   * @param {Query} query Query\n   * @param {TimeRange} range Time Range\n   * @param {Record<string, any>} params URL parameters\n   * @returns {Promise<DataFrame[]>} Feed\n   */\n  async getFeed(\n    query: Query,\n    range: TimeRange | null = null,\n    params: Record<string, unknown> | undefined = undefined\n  ): Promise<DataFrame[]> {\n    if (!params) {\n      params = {};\n    }\n\n    /**\n     * Extract parameters\n     */\n    const queryParams = this.instanceSettings.jsonData.feed?.split(/[\\?\\&]/);\n    if (queryParams?.length) {\n      queryParams.forEach((param) => {\n        const paramSplit = param.split('=');\n        if (params && paramSplit.length > 1) {\n          params[paramSplit[0]] = paramSplit[1];\n        }\n      });\n    }\n\n    /**\n     * Fetch Feed\n     */\n    const response = await lastValueFrom(\n      getBackendSrv().fetch({\n        method: 'GET',\n        headers: {\n          accept: 'application/rss+xml, application/atom+xml',\n        },\n        url: `${this.instanceSettings.url}/feed`,\n        params,\n      })\n    );\n\n    /**\n     * Nothing returned\n     */\n    if (!response || !response.data) {\n      return [];\n    }\n\n    /**\n     * Parse XML\n     */\n    const parser = new XMLParser({\n      ignoreAttributes: false,\n      isArray: (name, jpath) => {\n        return ALWAYS_ARRAY.indexOf(jpath) !== -1 ? true : false;\n      },\n    });\n    const data = parser.parse(response.data as string | Buffer);\n\n    /**\n     * RSS 1.0 (RDF) support\n     */\n    if (data['rdf:RDF'] && !data.rss) {\n      data.rss = data['rdf:RDF'];\n      data.rss.channel.item = data.rss.item;\n    }\n\n    /**\n     * RSS 2.0 with Channel data\n     */\n    if (data.rss && data.rss.channel) {\n      /**\n       * Channel Data\n       */\n      const channel = data.rss.channel;\n      const channelFrame = createDataFrame({\n        name: 'channel',\n        refId: query.refId,\n        fields: [\n          { name: 'title', values: [channel.title], type: FieldType.string },\n          { name: 'description', values: [channel.description], type: FieldType.string },\n          { name: 'generator', values: [channel.generator], type: FieldType.string },\n          { name: 'lastBuildDate', values: [channel.lastBuildDate], type: FieldType.string },\n          { name: 'link', values: [channel.link], type: FieldType.string },\n          { name: 'webMaster', values: [channel.webMaster], type: FieldType.string },\n          { name: 'ttl', values: [channel.ttl], type: FieldType.number },\n          { name: 'imageUrl', values: [channel.image?.url], type: FieldType.string },\n          { name: 'imageTitle', values: [channel.image?.title], type: FieldType.string },\n          { name: 'imageLink', values: [channel.image?.link], type: FieldType.string },\n        ],\n      });\n\n      /**\n       * If items not found, return Channel\n       */\n      if (!channel.item || query.feedType === FeedTypeValue.CHANNEL) {\n        return [channelFrame];\n      }\n\n      /**\n       * Configure Keys\n       * Take all the unique keys in all items\n       */\n      const channelKeys = getAllItemKeyConfigs(channel.item);\n\n      /**\n       * Configure Items\n       */\n      const items: FeedItems = {};\n\n      /**\n       * Find all items\n       */\n      channel.item.forEach((item: DataItem) => {\n        /**\n         * Filter by specified Date field\n         */\n        if (query.dateField && range && !isDateBetweenRange(item[query.dateField] as string, range)) {\n          return;\n        }\n\n        Object.keys(channelKeys).forEach((key) => {\n          const keyConfig = channelKeys[key];\n\n          /**\n           * Check key with Accessor (keys for meta tag)\n           */\n          if (!keyConfig.keyAccessor) {\n            let value = get(item, keyConfig.valueAccessor);\n\n            /**\n             * Parse Encoded content for H4 and first Image\n             */\n            if (key === ItemKey.CONTENT_H4 && value) {\n              const h4 = value.toString().match(/<h4>(.*?)<\\/h4>/);\n              value = h4?.length ? h4[1] : '';\n            }\n\n            if (key === ItemKey.CONTENT_IMG && value) {\n              const figure = value.toString().match(/<figure>(.*?)<\\/figure>/);\n              value = figure?.length ? figure[1] : '';\n            }\n\n            if (key === ItemKey.CONTENT_IMG_SRC && value) {\n              const figure = value.toString().match(/<figure>(.*?)<\\/figure>/);\n              const img = figure?.length ? figure[1].match(/<img.+src\\=(?:\\\"|\\')(.+?)(?:\\\"|\\')(?:.+?)\\>/) : null;\n              value = img?.length ? img[1] : '';\n            }\n\n            setItem(items, key, value as string);\n            return;\n          }\n\n          /**\n           * Get key for item\n           */\n          const itemKey = get(item, keyConfig.keyAccessor);\n\n          if (key === itemKey) {\n            /**\n             * Set value for key\n             */\n            setItem(items, key, get(item, keyConfig.valueAccessor) as string);\n          } else {\n            /**\n             * Set null\n             */\n            setItem(items, key, null);\n          }\n        });\n      });\n\n      /**\n       * Create Items frame\n       */\n      const itemsFrame = createDataFrame({\n        name: 'items',\n        refId: query.refId,\n        fields: Object.keys(items).map((key) => {\n          const item = items[key];\n          const type = FieldType.string;\n\n          return { name: key, values: item, type };\n        }),\n      });\n\n      /**\n       * Return Items only\n       */\n      if (query.feedType === FeedTypeValue.ITEMS) {\n        return [itemsFrame];\n      }\n\n      /**\n       * Return Channel & Items\n       */\n      return [channelFrame, itemsFrame];\n    }\n\n    /**\n     * Is it Atom?\n     */\n    if (!data.feed) {\n      return [];\n    }\n\n    /**\n     * Channel Data\n     */\n    const feed = data.feed;\n    const channelFrame = createDataFrame({\n      name: 'channel',\n      refId: query.refId,\n      fields: [\n        { name: 'author', values: [feed.author?.name], type: FieldType.string },\n        { name: 'id', values: [feed.id], type: FieldType.string },\n        { name: 'title', values: [feed.title], type: FieldType.string },\n        { name: 'updated', values: [feed.updated], type: FieldType.string },\n      ],\n    });\n\n    /**\n     * If enties not found, return Channel\n     */\n    if (!feed.entry || query.feedType === FeedTypeValue.CHANNEL) {\n      return [channelFrame];\n    }\n\n    /**\n     * Configure entries Keys\n     * Take all the unique keys in all entries\n     */\n    const entriesKeys: FeedItems = getUniqueAtomKeys(feed.entry);\n\n    /**\n     * Configure entries\n     */\n    const entries: FeedItems = {};\n\n    /**\n     * Find all entries\n     */\n    feed.entry.forEach((entry: DataItem) => {\n      /**\n       * Filter by specified Date field\n       */\n      if (query.dateField && range && !isDateBetweenRange(entry[query.dateField] as string, range)) {\n        return;\n      }\n\n      Object.keys(entriesKeys).forEach((key: string) => {\n        let value = entry[key];\n\n        /**\n         * If Entry doesn`t contain key set key with null value to avoid mixed up\n         */\n        if (!value) {\n          setItem(entries, key, null);\n        } else {\n          /**\n           * Link\n           */\n          if (key === ItemKey.LINK && (value as Record<string, string>)['@_href']) {\n            value = (value as Record<string, string>)['@_href'];\n          }\n\n          /**\n           * Content\n           */\n          if (key === ItemKey.CONTENT && (value as Record<string, string>)['#text']) {\n            value = (value as Record<string, string>)['#text'];\n          }\n\n          /**\n           * Summary\n           */\n          if (key === ItemKey.SUMMARY && (value as Record<string, string>)['#text']) {\n            value = (value as Record<string, string>)['#text'];\n          }\n\n          /**\n           * Author\n           */\n          if (key === ItemKey.AUTHOR && (value as Record<string, string>)['name']) {\n            value = (value as Record<string, string>)['name'];\n          }\n\n          /**\n           * Thumbnail\n           */\n          if (key === ItemKey.MEDIA_THUMBNAIL && (value as Record<string, string>)['@_url']) {\n            value = (value as Record<string, string>)['@_url'];\n          }\n\n          /**\n           * Media Group\n           */\n          if (key === ItemKey.MEDIA_GROUP) {\n            const mediaGroup: Record<string, unknown> = value as Record<string, unknown>;\n\n            /**\n             * Thumbnail URL\n             */\n            if (\n              mediaGroup[ItemKey.MEDIA_THUMBNAIL] &&\n              (mediaGroup[ItemKey.MEDIA_THUMBNAIL] as Record<string, unknown>)['@_url']\n            ) {\n              setItem(\n                entries,\n                `${ItemKey.MEDIA_GROUP}:${ItemKey.MEDIA_THUMBNAIL}:url`,\n                (mediaGroup[ItemKey.MEDIA_THUMBNAIL] as Record<string, unknown>)['@_url'] as string\n              );\n            }\n\n            /**\n             * Content URL\n             */\n            if (\n              mediaGroup[ItemKey.MEDIA_CONTENT] &&\n              (mediaGroup[ItemKey.MEDIA_CONTENT] as Record<string, unknown>)['@_url']\n            ) {\n              setItem(\n                entries,\n                `${ItemKey.MEDIA_GROUP}:${ItemKey.MEDIA_CONTENT}:url`,\n                (mediaGroup[ItemKey.MEDIA_CONTENT] as Record<string, unknown>)['@_url'] as string\n              );\n            }\n\n            /**\n             * Description\n             */\n            if (mediaGroup[ItemKey.MEDIA_DESCRIPTION]) {\n              setItem(\n                entries,\n                `${ItemKey.MEDIA_GROUP}:${ItemKey.MEDIA_DESCRIPTION}`,\n                mediaGroup[ItemKey.MEDIA_DESCRIPTION] as string\n              );\n            }\n          }\n\n          setItem(entries, key, value as string);\n        }\n      });\n    });\n\n    /**\n     * Create Items frame\n     */\n    const itemsFrame = createDataFrame({\n      name: 'items',\n      refId: query.refId,\n      fields: Object.keys(entries).map((key) => {\n        const item = entries[key];\n        return { name: key, values: item, type: FieldType.string };\n      }),\n    });\n\n    /**\n     * Return Items only\n     */\n    if (query.feedType === FeedTypeValue.ITEMS) {\n      return [itemsFrame];\n    }\n\n    /**\n     * Return Channel & Items\n     */\n    return [channelFrame, itemsFrame];\n  }\n}\n","import {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { Api } from '../api';\nimport { DataSourceTestStatus, FeedTypeValue } from '../constants';\nimport { DataSourceOptions, Query } from '../types';\n\n/**\n * Datasource\n */\nexport class DataSource extends DataSourceApi<Query, DataSourceOptions> {\n  /**\n   * Api\n   *\n   * @type {Api} api\n   */\n  api: Api;\n\n  /**\n   * Constructor\n   */\n  constructor(instanceSettings: DataSourceInstanceSettings<DataSourceOptions>) {\n    super(instanceSettings);\n    this.api = new Api(instanceSettings);\n  }\n\n  /**\n   * Query\n   */\n  async query(options: DataQueryRequest<Query>): Promise<DataQueryResponse> {\n    const { range, scopedVars } = options;\n    const data: DataFrame[] = [];\n\n    /**\n     * Process targets\n     */\n    await Promise.all(\n      options.targets.map(async (target) => {\n        const params = target.params ? target.params : {};\n\n        /**\n         * Replace Variables\n         */\n        if (Object.keys(params).length) {\n          Object.keys(params).forEach((param) => {\n            params[param] = getTemplateSrv().replace(params[param], scopedVars);\n          });\n        }\n\n        /**\n         * Get Data Frame from Feed\n         */\n        const frames = await this.api.getFeed(target, range, params);\n        if (frames && frames.length) {\n          data.push(...frames);\n        }\n      })\n    );\n\n    /**\n     * Return data\n     */\n    return { data };\n  }\n\n  /**\n   * Health Check\n   */\n  async testDatasource() {\n    /**\n     * Get RSS Feed\n     */\n    const frames = await this.api.getFeed({\n      refId: 'A',\n      feedType: FeedTypeValue.ALL,\n    });\n\n    const isStatusOk = frames.length ? true : false;\n\n    /**\n     * Return\n     */\n    return {\n      status: isStatusOk ? DataSourceTestStatus.SUCCESS : DataSourceTestStatus.ERROR,\n      message: isStatusOk ? `Connected.` : \"Error. Can't connect.\",\n    };\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor, QueryEditor } from './components';\nimport { DataSource } from './datasource';\nimport { DataSourceOptions, Query } from './types';\n\n/**\n * Datasource Plugin\n */\nexport const plugin = new DataSourcePlugin<DataSource, Query, DataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["validator","XMLParser","XMLBuilder","module","exports","XMLValidator","ignoreAttributes","Array","isArray","attrName","pattern","RegExp","test","nameStartChar","nameRegexp","regexName","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","exec","getAllMatches","regex","matches","match","allmatches","startIndex","lastIndex","index","push","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildFromOrderedJs","getIgnoreAttributesFn","attributeNamePrefix","attributesGroupName","textNodeName","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","key","attributeValueProcessor","preserveOrder","commentPropName","entities","val","processEntities","stopNodes","oneListGroup","Builder","this","isAttribute","ignoreAttributesFn","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","ajPath","j2x","concat","buildTextValNode","buildObjectNode","repeat","name","startsWith","prototype","build","jObj","arrayNodeName","jPath","join","call","Date","attr","buildAttrPairStr","newval","replaceEntitiesValue","arrLen","listTagVal","listTagAttr","j","item","textValue","Ks","L","closeTag","tagEndExp","piClosingChar","entity","arrToStr","arr","indentation","xmlStr","isPreviousElementTag","tagObj","propName","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","endsWith","includes","attrMap","attrVal","lastIndexOf","jArray","readEntityExp","entityName","Error","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","hasBody","comment","exp","regx","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","hex","leadingZeros","eNotation","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","attrs","buildOptions","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastTagName","propIndex","tagsNodeStack","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","docTypeEntities","rawTagName","lastTag","isItStopNode","tagContent","readStopNodeData","child","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","str","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","search","trimStart","openTagCount","shouldParse","constructor","_","String","fromCharCode","Number","parseInt","OrderedObjParser","prettify","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","compress","text","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","hexRegex","numRegex","window","parseFloat","consider","decimalPoint","trimmedStr","skipLike","sign","numTrimmedByZeros","numStr","num","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","prop","r","Symbol","toStringTag","DataSourceTestStatus","ItemKey","ALWAYS_ARRAY","FeedTypeValue","DEFAULT_QUERY","feedType","FEED_TYPE","label","description","TEST_IDS","ConfigEditor","PureComponent","render","props","jsonData","InlineFieldRow","InlineField","labelWidth","grow","invalid","feed","tooltip","Input","type","onChange","onFeedChange","placeholder","data-testid","event","onOptionsChange","ParametersEditor","query","onRunQuery","params","setParameter","removeParameters","param","e","currentTarget","Button","variant","title","onClick","icon","QueryEditor","defaults","div","Select","find","onFeedTypeChange","aria-label","dateField","onDateFieldChange","CollapsableSection","isOpen","setItem","items","isDateBetweenRange","range","pubDate","from","unix","to","Api","queryParams","instanceSettings","forEach","paramSplit","response","lastValueFrom","getBackendSrv","fetch","method","headers","accept","url","rss","channel","channelFrame","createDataFrame","refId","fields","values","FieldType","generator","lastBuildDate","link","webMaster","ttl","number","image","CHANNEL","channelKeys","META","GUID","valueAccessor","CONTENT_ENCODED","CONTENT_H4","CONTENT_IMG","CONTENT_IMG_SRC","contentKey","meta","keyAccessor","getAllItemKeyConfigs","keyConfig","h4","figure","img","itemKey","itemsFrame","ITEMS","author","id","updated","entry","entriesKeys","reduce","entries","LINK","CONTENT","SUMMARY","AUTHOR","MEDIA_THUMBNAIL","MEDIA_GROUP","mediaGroup","MEDIA_CONTENT","MEDIA_DESCRIPTION","DataSource","DataSourceApi","scopedVars","Promise","all","targets","getTemplateSrv","frames","api","getFeed","isStatusOk","ALL","status","SUCCESS","ERROR","super","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor"],"sourceRoot":""}